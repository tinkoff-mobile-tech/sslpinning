// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7.1 (swiftlang-5.7.1.135.3 clang-1400.0.29.51)
// swift-module-flags: -target arm64-apple-ios13.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name TCSSSLPinning
// swift-module-flags-ignorable: -enable-bare-slash-regex
import Foundation
import Swift
@_exported import TCSSSLPinning
import TrustKit
import WebKit
import _Concurrency
import _StringProcessing
public struct AppParameters {
  public init(version: String, origin: String, name: String? = nil)
}
@frozen public enum HPKPServiceAssembly {
  public static func createHPKPPinningService(with configuration: HPKPServiceConfiguration) -> IHTTPPublicKeyPinningService
  public static func getFallbackCertificates() -> [String]
  public static func getGRPCCertificates() -> [String]
}
public enum HPKPServiceConstants {
  public enum Files {
  }
  public enum Configuration {
    public static let defaultHostsAndPinsStorageKey: Swift.String
    public static let productionHostAndPinsURL: Foundation.URL
    public static let debugHostAndPinsURL: Foundation.URL
    public static let defaultInteractivePolicyCallbackTimeout: Foundation.TimeInterval
  }
}
public struct HPKPServiceConfiguration {
  public init(hostAndPinsURL: URL = HPKPServiceConstants.Configuration.productionHostAndPinsURL, untrustedConnectionPolicy: SSLUntrustedConnectionPolicy = .break, cachedHostsAndPinsDefaultsKey: String = HPKPServiceConstants.Configuration.defaultHostsAndPinsStorageKey, customHostsAndPinsStorage: IHostsAndPinsStorage? = nil, customLocalCertificateProvider: ILocalCertificateProvider? = nil, appParameters: AppParameters, isEnabledSecTrustListValidator: Bool = true, shouldRememberInteractiveUserChoice: Bool = true, interactivePolicyCallbackTimeout: TimeInterval = HPKPServiceConstants.Configuration.defaultInteractivePolicyCallbackTimeout)
}
public protocol IHostsAndPinsStorage {
  var cachedHostsAndPins: [Payload]? { get }
  func update(_ hostsAndPins: [Payload])
}
public protocol IHTTPPublicKeyPinningService : Foundation.URLSessionDelegate, TCSSSLPinning.SSLInfoDatasource, WebKit.WKNavigationDelegate {
  var delegate: HTTPPublicKeyPinningServiceDelegate? { get set }
  func updateHostsAndPins()
  func configure()
}
public protocol SSLInfoDatasource : AnyObject {
  var certificateChainCorruptedState: SSLCertificateChainCorruptedState { get }
  var hostsAndPinsListState: SSLHostsAndPinsListState { get }
}
public protocol HTTPPublicKeyPinningServiceDelegate : AnyObject {
  func httpPublicKeyPinningService(_ hpkpService: IHTTPPublicKeyPinningService, didUpdateHostsAndPinsListWith state: SSLHostsAndPinsListState)
  func httpPublicKeyPinningService(_ hpkpService: IHTTPPublicKeyPinningService, didCatchCertChainCorruptionStateChangeTo newState: SSLCertificateChainCorruptedState)
}
public protocol ILocalCertificateProvider {
  func getCertificate() -> String?
  func getCertificateRef() -> SecCertificate?
}
public protocol IPemCertificatesProvider {
  func getCertificates() -> [String]?
}
public struct LocalFile {
  public init(fileName: String, fileType: String)
}
public struct Configuration : Codable, Equatable {
  public let payload: [Payload]
  public static func == (a: TCSSSLPinning.Configuration, b: TCSSSLPinning.Configuration) -> Swift.Bool
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct Payload : Codable, Equatable {
  public let host: String
  public let pins: [Pin]
  public init(host: String, pins: [Pin])
  public static func == (a: TCSSSLPinning.Payload, b: TCSSSLPinning.Payload) -> Swift.Bool
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct Pin : Codable, Equatable {
  public let isOnline: Bool?
  public let pin: String
  public let serial: String
  public init(isOnline: Bool?, pin: String, serial: String)
  public static func == (a: TCSSSLPinning.Pin, b: TCSSSLPinning.Pin) -> Swift.Bool
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@frozen public enum SSLCertificateChainCorruptedState {
  case unknown
  case valid
  case corrupted(certificateChain: [String])
}
extension SSLCertificateChainCorruptedState : Equatable {
  public static func == (lhs: SSLCertificateChainCorruptedState, rhs: SSLCertificateChainCorruptedState) -> Bool
}
@objc @frozen public enum SSLHostsAndPinsListState : Int {
  case normal
  case updateError
  case wrongCert
  case localList
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public typealias ShouldContinueOnCertChainCorrupted = (_ hpkpService: IHTTPPublicKeyPinningService, _ untrustedHost: String, _ completion: @escaping (Bool) -> Void) -> Void
@frozen public enum SSLUntrustedConnectionPolicy {
  case `continue`
  case `break`
  case interactive(askUser: ShouldContinueOnCertChainCorrupted)
}
extension TCSSSLPinning.HPKPServiceAssembly : Swift.Sendable {}
extension TCSSSLPinning.SSLCertificateChainCorruptedState : Swift.Sendable {}
extension TCSSSLPinning.SSLHostsAndPinsListState : Swift.Equatable {}
extension TCSSSLPinning.SSLHostsAndPinsListState : Swift.Hashable {}
extension TCSSSLPinning.SSLHostsAndPinsListState : Swift.RawRepresentable {}
extension TCSSSLPinning.SSLHostsAndPinsListState : Swift.Sendable {}
